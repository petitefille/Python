
from scitools.std import plot, figure
import numpy as np

class Problem:
   def __init__(self, h, Ts, T0, dt):
      self.Ts, self.T0, self.dt = h, Ts, T0, dt
      self.h = estimate_h(t1, T1)
      # class Problem containing the parameters h, Ts, T0, dt as attributes
      


   def estimate_h(self, t1, T1):  
      # estimate_h should take t1 and T(t1) as arguments, compute h, and assign it to self.h
      t1, T1 = self.t1, self.T1 
      h = float(T1 - self.T0)/(t1*(self.Ts - self.T0))
      return h      

      

   def f(T, t):
      return -h*(T-Ts)

   def __call__(self):
      import ODESolver
      solver = ODESolver.RungeKutta4(f)
      solver.set_initial_condition(T0)
      import numpy as np
      time_points = np.linspace(0, 60*60, 1001)
      T, t = solver.solve(time_points, terminate)
      return T, t
      
 # the right hand side of the ODE can be implemented in a __call__ method. 
# If you use a class from the ODESolver hierarchy to solve the ODE, include
#  the terminate function as a method in class Problem

   

   def terminate(T, t, step_no):
    # Most recently computed T value: T[step_no]
      if abs(T[step_no] - Ts) < 1:
         return True  # terminate time loop
      else:
         return False

 
problem = Problem(Ts=20, T0=200)
problem()
 
   
   


"""
def

Ts = 20
t1 = 50
T1 = 180
T0 = 200
h = float(T1 - T0)/(t1*(Ts - T0))

# T'(t) = -h*(T-Ts)
def f(T, t):
    return -h*(T-Ts)

import ODESolver
solver = ODESolver.RungeKutta4(f)
solver.set_initial_condition(T0)
import numpy as np
time_points = np.linspace(0, 60*60, 1001)

def terminate(T, t, step_no):
    # Most recently computed T value: T[step_no]
    if abs(T[step_no] - Ts) < 1:
        return True  # terminate time loop
    else:
        return False

T, t = solver.solve(time_points, terminate)
from matplotlib.pyplot import plot, show
plot(t, T)
show()
"""

