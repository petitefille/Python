
"""
Fourth-order Runge-Kutta method to solve x' = f(x,t) with x(t[0]) = x0.

    USAGE:
        x = rk4(f, x0, t)
        from math import sqrt
        f = lambda x: 2*(y-1)
        x0 = 1+ sqrt(0.001)
        import numpy as np
        t = np.linspace(0,4,4)

    INPUT:
        f     - function of x and t equal to dx/dt.  x may be multivalued,
                in which case it should be a list or a NumPy array.  In this
                case f must return a NumPy array with the same dimension
                as x.
        x0    - the initial condition(s).  Specifies the value of x when
                t = t[0].  Can be either a scalar or a list or NumPy array
                if a system of equations is being solved.

        t     - list or NumPy array of t values to compute solution at.
                t[0] is the the initial condition point, and the difference
                h=t[i+1]-t[i] determines the step size h.

    OUTPUT:
        x     - NumPy array containing solution values corresponding to each
                entry in t array.  If a system is being solved, x will be
                an array of arrays.
    """
def rk4( f, x0, t ):
   n = len( t )
   x = np.array( [ x0 ] * n )
   for i in xrange( n -1 ): 
       h = t[i+1] - t[i]
       k1 = h*f( t[i], x[i]) 
       k2 = h*f( t[i] + 0.5*h, x[i] + 0.5*k1)
       k3 = h*f( t[i] + 0.5*h, x[i] + 0.5 * k2)
       k4 = h*f( t[i] + h, x[i] + k3)
       x[i+1] = x[i] + (1./6.)*k1 + (1./3.)*k2 + (1./3.)*k3 + (1./6.)*k4

   return x

if __name__ == '__main__':
   import numpy as np
   
   def f(t, x):
      return 1./(2*(x-1))
   x0 = 1 + np.sqrt(0.001)
   t = np.linspace(0,4,12289)
   x_rk4 = rk4(f, x0, t)
#    print x_rk4

 


def ForwardEuler(f, x0, t):
   n = len( t )
   x = np.array( [ x0 ] * n )
   for i in xrange( n -1 ):
      h = t[i+1] - t[i]
      x[i+1] = x[i] + h*f(t[i],x[i])
        
   return x

def f(t, x):
      return 1./(2*(x-1))

x0 = 1 + np.sqrt(0.001)
t = np.linspace(0,4,12289)
x_ForwardEuler = ForwardEuler(f, x0, t)
def f(t):
   return 1 + np.sqrt(t + 0.001)
y = f(t) 
# print x_ForwardEuler

import matplotlib.pyplot as plt
plt.plot(t,x_rk4, 'r-')
plt.hold('on')
plt.plot(t,x_ForwardEuler,'b-')
plt.hold('on')
plt.plot(t, y, 'k-') 
plt.legend(['4rth order Runge-Kutta method','Forward Euler scheme','y(x)'])
plt.xlabel('x')
plt.ylabel('y(x)')
plt.title('Comparing ODE Methods')
plt.savefig('tmp4.pdf')
plt.show()
# import matplotlib.pyplot as plt
# plt.plot(t)
